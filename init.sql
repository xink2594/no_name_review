-- =========== 教师信息表 (teachers) ===========
-- 存储教师的核心信息以及用于快速查询的聚合数据
CREATE TABLE public.teachers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- 使用 UUID 作为主键，更安全
    name TEXT NOT NULL, -- 教师姓名
    department TEXT, -- 所属院系/部门
    title TEXT, -- 职称，如教授、副教授等
    
    -- 聚合数据，用于优化性能，避免每次都实时计算
    review_count INT NOT NULL DEFAULT 0, -- 总评价数
    avg_rating NUMERIC(3, 2) NOT NULL DEFAULT 0.00, -- 平均分，保留两位小数
    roll_call_percentage NUMERIC(5, 2) NOT NULL DEFAULT 0.00, -- 点名率，保留两位小数
    
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(), -- 创建时间
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW() -- 更新时间
);

-- 为 updated_at 创建自动更新触发器
CREATE OR REPLACE TRIGGER on_teachers_update
BEFORE UPDATE ON public.teachers
FOR EACH ROW
EXECUTE FUNCTION moddatetime(updated_at);

COMMENT ON COLUMN public.teachers.avg_rating IS '教师的综合平均分，支持0.5分精度';
COMMENT ON COLUMN public.teachers.roll_call_percentage IS '认为该教师会点名的学生百分比';


-- =========== 课程信息总表 (courses) ===========
-- 存储所有出现过的课程，作为“标签池”，与教师解耦
-- 注意：我已根据你的逻辑对该表结构进行了修正，去除了 teacher_id，使课程成为独立实体
CREATE TABLE public.courses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    course_name TEXT NOT NULL UNIQUE, -- 课程名称，必须唯一
    course_code TEXT, -- 课程代码，可选
    
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.courses IS '所有课程的全局池，用于标签功能';


-- =========== 教师-课程关联表 (teacher_course_associations) ===========
-- 实现教师和课程的“多对多”关系，并记录关联次数。这是实现你的tag功能的关键。
CREATE TABLE public.teacher_course_associations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 使用自增 bigint
    teacher_id UUID NOT NULL, -- 关联到 teachers.id
    course_id UUID NOT NULL, -- 关联到 courses.id
    association_count INT NOT NULL DEFAULT 1, -- 被关联的次数
    
    -- 确保同一个老师和课程的组合只有一条记录
    UNIQUE (teacher_id, course_id),
    
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.teacher_course_associations IS '记录哪个老师被认为教过哪个课程，以及有多少人这么认为';


-- =========== 总体评价信息表 (reviews) ===========
-- 存储每一次提交的总体评价信息
CREATE TABLE public.reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    teacher_id UUID NOT NULL, -- 关联到 teachers.id
    
    -- 核心评价内容
    rating NUMERIC(2, 1) NOT NULL CHECK (rating >= 0.5 AND rating <= 5.0 AND MOD(rating * 10, 5) = 0), -- 整体评分，0.5-5.0，步长0.5
    comment TEXT, -- 教师总体评价
    does_roll_call BOOLEAN NOT NULL, -- 是否点名
    
    -- 互动数据
    upvotes INT NOT NULL DEFAULT 0, -- 赞成数
    downvotes INT NOT NULL DEFAULT 0, -- 反对数
    
    -- 安全与防滥用
    submitter_hash TEXT, -- 提交者IP或其他指纹信息的哈希值，用于有限分析
    
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON COLUMN public.reviews.submitter_hash IS '用于识别短时间内重复提交的匿名标识符';


-- =========== 单独课程评价表 (course_reviews) ===========
-- 存储针对某一门具体课程的评价
CREATE TABLE public.course_reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    review_id UUID NOT NULL, -- 关联到 reviews.id，表示这是哪次提交的一部分
    teacher_id UUID NOT NULL, -- 关联到 teachers.id
    course_id UUID NOT NULL, -- 关联到 courses.id，指明是评价哪门课
    
    course_rating NUMERIC(2, 1) NOT NULL CHECK (course_rating >= 0.5 AND course_rating <= 5.0 AND MOD(course_rating * 10, 5) = 0), -- 课程评分，0.5-5.0，步长0.5
    course_comment TEXT, -- 课程评价内容
    
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE public.course_reviews IS '针对特定课程的详细评价';


-- =========== 启用并配置行级安全 (Row Level Security) ===========
-- 这是一个非常重要的安全步骤，即使没有用户系统

-- 1. 为每张表启用 RLS
ALTER TABLE public.teachers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.courses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.teacher_course_associations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.course_reviews ENABLE ROW LEVEL SECURITY;

-- 2. 为每张表创建策略，允许任何人（anon role）读取数据
CREATE POLICY "Allow public read access" ON public.teachers FOR SELECT USING (true);
CREATE POLICY "Allow public read access" ON public.courses FOR SELECT USING (true);
CREATE POLICY "Allow public read access" ON public.teacher_course_associations FOR SELECT USING (true);
CREATE POLICY "Allow public read access" ON public.reviews FOR SELECT USING (true);
CREATE POLICY "Allow public read access" ON public.course_reviews FOR SELECT USING (true);

-- 注意：没有为 INSERT, UPDATE, DELETE 创建策略。
-- 这意味着只有使用 'service_role' key（应该在你的 Cloudflare Worker 后端安全存储）的请求
-- 才能写入数据。这是推荐的安全模式。